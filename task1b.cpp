#include "mbed.h"
#include <cstring>

// OLED Display Configuration
#define I2C_FREQ    100000    // Use a slower I2C speed for reliability
#define OLED_ADDR   0x3C      // SSD1306 I2C address (change to 0x3D if needed)
#define RESET_PIN   D4        // OLED reset pin

I2C i2c(PB_9, PB_8);         // SDA = PB_9, SCL = PB_8
DigitalOut oled_reset(RESET_PIN);

// Display buffer: 128 columns Ã— (32 rows / 8) pages = 512 bytes
uint8_t buffer[512];

// A complete 5x7 font for ASCII 32 to 127.
// Each character is 5 bytes wide. (Only the lower 7 bits in each byte are used.)
static const uint8_t font5x7[96][5] = {
    {0x00,0x00,0x00,0x00,0x00}, // 32: ' '
    {0x00,0x00,0x5F,0x00,0x00}, // 33: '!'
    {0x00,0x07,0x00,0x07,0x00}, // 34: '"'
    {0x14,0x7F,0x14,0x7F,0x14}, // 35: '#'
    {0x24,0x2A,0x7F,0x2A,0x12}, // 36: '$'
    {0x23,0x13,0x08,0x64,0x62}, // 37: '%'
    {0x36,0x49,0x55,0x22,0x50}, // 38: '&'
    {0x00,0x05,0x03,0x00,0x00}, // 39: '''
    {0x00,0x1C,0x22,0x41,0x00}, // 40: '('
    {0x00,0x41,0x22,0x1C,0x00}, // 41: ')'
    {0x14,0x08,0x3E,0x08,0x14}, // 42: '*'
    {0x08,0x08,0x3E,0x08,0x08}, // 43: '+'
    {0x00,0x50,0x30,0x00,0x00}, // 44: ','
    {0x08,0x08,0x08,0x08,0x08}, // 45: '-'
    {0x00,0x60,0x60,0x00,0x00}, // 46: '.'
    {0x20,0x10,0x08,0x04,0x02}, // 47: '/'
    {0x3E,0x51,0x49,0x45,0x3E}, // 48: '0'
    {0x00,0x42,0x7F,0x40,0x00}, // 49: '1'
    {0x42,0x61,0x51,0x49,0x46}, // 50: '2'
    {0x21,0x41,0x45,0x4B,0x31}, // 51: '3'
    {0x18,0x14,0x12,0x7F,0x10}, // 52: '4'
    {0x27,0x45,0x45,0x45,0x39}, // 53: '5'
    {0x3C,0x4A,0x49,0x49,0x30}, // 54: '6'
    {0x01,0x71,0x09,0x05,0x03}, // 55: '7'
    {0x36,0x49,0x49,0x49,0x36}, // 56: '8'
    {0x06,0x49,0x49,0x29,0x1E}, // 57: '9'
    {0x00,0x36,0x36,0x00,0x00}, // 58: ':'
    {0x00,0x56,0x36,0x00,0x00}, // 59: ';'
    {0x08,0x14,0x22,0x41,0x00}, // 60: '<'
    {0x14,0x14,0x14,0x14,0x14}, // 61: '='
    {0x00,0x41,0x22,0x14,0x08}, // 62: '>'
    {0x02,0x01,0x51,0x09,0x06}, // 63: '?'
    {0x32,0x49,0x79,0x41,0x3E}, // 64: '@'
    {0x7E,0x11,0x11,0x11,0x7E}, // 65: 'A'
    {0x7F,0x49,0x49,0x49,0x36}, // 66: 'B'
    {0x3E,0x41,0x41,0x41,0x22}, // 67: 'C'
    {0x7F,0x41,0x41,0x22,0x1C}, // 68: 'D'
    {0x7F,0x49,0x49,0x49,0x41}, // 69: 'E'
    {0x7F,0x09,0x09,0x09,0x01}, // 70: 'F'
    {0x3E,0x41,0x49,0x49,0x7A}, // 71: 'G'
    {0x7F,0x08,0x08,0x08,0x7F}, // 72: 'H'
    {0x00,0x41,0x7F,0x41,0x00}, // 73: 'I'
    {0x20,0x40,0x41,0x3F,0x01}, // 74: 'J'
    {0x7F,0x08,0x14,0x22,0x41}, // 75: 'K'
    {0x7F,0x40,0x40,0x40,0x40}, // 76: 'L'
    {0x7F,0x02,0x0C,0x02,0x7F}, // 77: 'M'
    {0x7F,0x04,0x08,0x10,0x7F}, // 78: 'N'
    {0x3E,0x41,0x41,0x41,0x3E}, // 79: 'O'
    {0x7F,0x09,0x09,0x09,0x06}, // 80: 'P'
    {0x3E,0x41,0x51,0x21,0x5E}, // 81: 'Q'
    {0x7F,0x09,0x19,0x29,0x46}, // 82: 'R'
    {0x46,0x49,0x49,0x49,0x31}, // 83: 'S'
    {0x01,0x01,0x7F,0x01,0x01}, // 84: 'T'
    {0x3F,0x40,0x40,0x40,0x3F}, // 85: 'U'
    {0x1F,0x20,0x40,0x20,0x1F}, // 86: 'V'
    {0x3F,0x40,0x38,0x40,0x3F}, // 87: 'W'
    {0x63,0x14,0x08,0x14,0x63}, // 88: 'X'
    {0x07,0x08,0x70,0x08,0x07}, // 89: 'Y'
    {0x61,0x51,0x49,0x45,0x43}, // 90: 'Z'
    {0x00,0x7F,0x41,0x41,0x00}, // 91: '['
    {0x02,0x04,0x08,0x10,0x20}, // 92: backslash
    {0x00,0x41,0x41,0x7F,0x00}, // 93: ']'
    {0x04,0x02,0x01,0x02,0x04}, // 94: '^'
    {0x40,0x40,0x40,0x40,0x40}, // 95: '_'
    {0x00,0x01,0x02,0x04,0x00}, // 96: '`'
    {0x20,0x54,0x54,0x54,0x78}, // 97: 'a'
    {0x7F,0x48,0x44,0x44,0x38}, // 98: 'b'
    {0x38,0x44,0x44,0x44,0x20}, // 99: 'c'
    {0x38,0x44,0x44,0x48,0x7F}, // 100: 'd'
    {0x38,0x54,0x54,0x54,0x18}, // 101: 'e'
    {0x08,0x7E,0x09,0x01,0x02}, // 102: 'f'
    {0x0C,0x52,0x52,0x52,0x3E}, // 103: 'g'
    {0x7F,0x08,0x04,0x04,0x78}, // 104: 'h'
    {0x00,0x44,0x7D,0x40,0x00}, // 105: 'i'
    {0x20,0x40,0x44,0x3D,0x00}, // 106: 'j'
    {0x7F,0x10,0x28,0x44,0x00}, // 107: 'k'
    {0x00,0x41,0x7F,0x40,0x00}, // 108: 'l'
    {0x7C,0x04,0x78,0x04,0x78}, // 109: 'm'
    {0x7C,0x08,0x04,0x04,0x78}, // 110: 'n'
    {0x38,0x44,0x44,0x44,0x38}, // 111: 'o'
    {0x7C,0x14,0x14,0x14,0x08}, // 112: 'p'
    {0x08,0x14,0x14,0x18,0x7C}, // 113: 'q'
    {0x7C,0x08,0x04,0x04,0x08}, // 114: 'r'
    {0x48,0x54,0x54,0x54,0x20}, // 115: 's'
    {0x04,0x3F,0x44,0x40,0x20}, // 116: 't'
    {0x3C,0x40,0x40,0x20,0x7C}, // 117: 'u'
    {0x1C,0x20,0x40,0x20,0x1C}, // 118: 'v'
    {0x3C,0x40,0x30,0x40,0x3C}, // 119: 'w'
    {0x44,0x28,0x10,0x28,0x44}, // 120: 'x'
    {0x0C,0x50,0x50,0x50,0x3C}, // 121: 'y'
    {0x44,0x64,0x54,0x4C,0x44}, // 122: 'z'
    {0x00,0x08,0x36,0x41,0x00}, // 123: '{'
    {0x00,0x00,0x7F,0x00,0x00}, // 124: '|'
    {0x00,0x41,0x36,0x08,0x00}, // 125: '}'
    {0x10,0x08,0x08,0x10,0x08}, // 126: '~'
    {0x00,0x00,0x00,0x00,0x00}  // 127: DEL
};

// Draw a single character (using the 5x7 font) into the buffer at (x,y)
// x: 0..127, y: 0..(32-7)
void draw_char(uint8_t x, uint8_t y, char c) {
    if (c < 32 || c > 127) return;  // unsupported
    uint8_t index = c - 32;
    for (int i = 0; i < 5; i++) {
        uint8_t colData = font5x7[index][i];
        for (int j = 0; j < 7; j++) { // each character is 7 pixels tall
            if (colData & (1 << j)) {
                int px = x + i;
                int py = y + j;
                if (px >= 128 || py >= 32) continue;
                int page = py / 8;           // each page is 8 pixels tall
                int bit = py % 8;
                buffer[page * 128 + px] |= (1 << bit);
            }
        }
    }
}

// Draw a null-terminated string starting at (x,y)
void draw_text(uint8_t x, uint8_t y, const char* text) {
    while (*text) {
        draw_char(x, y, *text);
        x += 6;  // 5 pixels width + 1 pixel spacing
        text++;
    }
}

// Send a command to the OLED (control byte 0x00)
void oled_command(uint8_t cmd) {
    char data[2] = {0x00, (char)cmd};
    i2c.write(OLED_ADDR << 1, data, 2);
}

// Update the OLED with the contents of the buffer
void update_display() {
    for (uint8_t page = 0; page < 4; page++) {
        oled_command(0xB0 + page); // set page address
        oled_command(0x00);        // set lower column address
        oled_command(0x10);        // set higher column address
        char data[129];
        data[0] = 0x40;  // data mode
        memcpy(data + 1, &buffer[page * 128], 128);
        i2c.write(OLED_ADDR << 1, data, 129);
    }
}

// Hardware reset of the OLED
void oled_reset_display() {
    oled_reset = 0;
    wait_us(1000);   // 1 ms
    oled_reset = 1;
    wait_us(100000); // 100 ms for proper power-up
}

// Initialize the OLED with a set of commands
void init_oled() {
    oled_reset_display();
    const uint8_t init_cmds[] = {
        0xAE,             // Display OFF
        0xD5, 0x80,       // Set display clock divide ratio/oscillator frequency
        0xA8, 0x1F,       // Set multiplex ratio (32 rows)
        0xD3, 0x00,       // Set display offset
        0x40,             // Set start line address
        0x8D, 0x14,       // Enable charge pump
        0x20, 0x00,       // Set memory addressing mode to horizontal
        0xA1,             // Set segment re-map (column address 127 is mapped to SEG0)
        0xC8,             // Set COM output scan direction (remapped mode)
        0xDA, 0x02,       // Set COM pins hardware configuration
        0x81, 0x8F,       // Set contrast control
        0xD9, 0xF1,       // Set pre-charge period
        0xDB, 0x40,       // Set VCOMH deselect level
        0xA4,             // Entire display ON (resume to RAM content display)
        0xA6,             // Set normal display (A7 for inverse)
        0xAF              // Display ON
    };
    for (unsigned int i = 0; i < sizeof(init_cmds); i++) {
        oled_command(init_cmds[i]);
    }
}

// Clear the display buffer (set to all zeros)
void clear_buffer() {
    memset(buffer, 0, sizeof(buffer));
}

int main() {
    i2c.frequency(I2C_FREQ);
    init_oled();
    clear_buffer();
    // Draw at top-left (x=0, y=0)
    draw_text(0, 0, "<Programming My>");
    draw_text(0, 10, "<<Nucleo Board>>");
    update_display();
    while(1) {
        // Infinite loop; the message remains on the display.
        wait(1.0);
    }
}